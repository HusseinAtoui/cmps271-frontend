require('dotenv').config();
const express = require('express');
const mongoose = require('mongoose');
const cors = require('cors');
const bodyParser = require('body-parser');
const multer = require('multer');
const path = require('path');

const app = express();
const PORT = process.env.PORT || 5000;

// Middleware
app.use(cors());
app.use(bodyParser.json());
app.use('/uploads', express.static('uploads')); // Serve uploaded files

// Connect to MongoDB
mongoose.connect(process.env.MONGO_URI, {
  useNewUrlParser: true,
  useUnifiedTopology: true,
}).then(() => console.log('MongoDB Connected'))
  .catch(err => console.log(err));

// Submission Schema
const SubmissionSchema = new mongoose.Schema({
  name: String,
  email: String,
  phone: String,
  bio: String,
  document: String,  // File paths for uploads
  picture: String,
  status: { type: String, default: 'Pending' },
  submittedAt: { type: Date, default: Date.now }
});

const Submission = mongoose.model('Submission', SubmissionSchema);

// File Upload Config
const storage = multer.diskStorage({
  destination: 'uploads/',
  filename: (req, file, cb) => {
    cb(null, `${Date.now()}-${file.originalname}`);
  }
});

const upload = multer({
  storage,
  fileFilter: (req, file, cb) => {
    const fileTypes = /jpeg|jpg|png|pdf/;
    const mimeType = fileTypes.test(file.mimetype);
    const extName = fileTypes.test(path.extname(file.originalname).toLowerCase());

    if (mimeType && extName) {
      return cb(null, true);
    }
    cb(new Error('File type not supported'), false);
  },
  limits: { fileSize: 5 * 1024 * 1024 }, // Limit files to 5MB
});

// Routes

// Submit a work
app.post('/submit', upload.fields([{ name: 'document' }, { name: 'picture' }]), async (req, res) => {
  try {
    const newSubmission = new Submission({
      name: req.body.name,
      email: req.body.email,
      phone: req.body.phone,
      bio: req.body.bio,
      document: req.files['document'] ? `/uploads/${req.files['document'][0].filename}` : null,
      picture: req.files['picture'] ? `/uploads/${req.files['picture'][0].filename}` : null,
    });

    await newSubmission.save();
    res.status(201).json({ message: 'Su
